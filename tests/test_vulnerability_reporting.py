#!/usr/bin/env python3
"""
Test script for StackHawk MCP Vulnerability Reporting Features

This script demonstrates the new vulnerability reporting and analysis tools
that use the StackHawk findings endpoint.
"""

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import asyncio
import json
from stackhawk_mcp.server import StackHawkMCPServer
import pytest

@pytest.mark.asyncio
async def test_vulnerability_reporting():
    """Test the vulnerability reporting features"""
    
    # Create a mock server instance
    server = StackHawkMCPServer("mock-api-key")
    
    print("=== Testing StackHawk MCP Vulnerability Reporting Features ===\n")
    
    # Mock organization ID for testing
    org_id = "12345678-1234-1234-1234-123456789012"
    
    # Test 1: Get vulnerability report
    print("1. Generating comprehensive vulnerability report...")
    try:
        result = await server._get_vulnerability_report(
            org_id=org_id,
            severity_filter="All",
            time_range="30d",
            include_remediation=True,
            group_by="severity"
        )
        print("✅ Vulnerability report generated successfully!")
        print(f"   Organization ID: {result['organizationId']}")
        print(f"   Report groups: {len(result['report'])}")
        print(f"   Timestamp: {result['timestamp']}")
    except Exception as e:
        print(f"❌ Failed to generate vulnerability report: {e}")
    
    print("\n" + "="*50 + "\n")
    
    # Test 2: Analyze vulnerability trends
    print("2. Analyzing vulnerability trends...")
    try:
        result = await server._analyze_vulnerability_trends(
            org_id=org_id,
            analysis_period="90d",
            include_applications=True,
            include_severity_breakdown=True
        )
        print("✅ Vulnerability trends analyzed successfully!")
        print(f"   Organization ID: {result['organizationId']}")
        print(f"   Applications analyzed: {len(result['trends'])}")
        print(f"   Analysis period: 90 days")
    except Exception as e:
        print(f"❌ Failed to analyze vulnerability trends: {e}")
    
    print("\n" + "="*50 + "\n")
    
    # Test 3: Get critical findings
    print("3. Getting critical findings...")
    try:
        result = await server._get_critical_findings(
            org_id=org_id,
            severity_levels=["Critical", "High"],
            include_remediation=True,
            max_results=25
        )
        print("✅ Critical findings retrieved successfully!")
        print(f"   Organization ID: {result['organizationId']}")
        print(f"   Critical findings: {len(result['findings'])}")
        print(f"   Max results requested: 25")
    except Exception as e:
        print(f"❌ Failed to get critical findings: {e}")
    
    print("\n" + "="*50 + "\n")
    
    # Test 4: Generate executive summary
    print("4. Generating executive summary...")
    try:
        result = await server._generate_executive_summary(
            org_id=org_id,
            time_period="30d",
            include_recommendations=True,
            include_risk_score=True
        )
        print("✅ Executive summary generated successfully!")
        print(f"   Organization ID: {result['organizationId']}")
        print(f"   Time period: 30 days")
        print(f"   Total findings: {result['summary']['totalFindings']}")
        if 'riskScore' in result['summary']:
            print(f"   Risk score: {result['summary']['riskScore']}")
    except Exception as e:
        print(f"❌ Failed to generate executive summary: {e}")
    
    print("\n" + "="*50 + "\n")
    
    # Test 5: Demonstrate different report types
    print("5. Testing different report configurations...")
    
    # Test with different severity filters
    severity_filters = ["High", "Medium", "Low"]
    for severity in severity_filters:
        try:
            result = await server._get_vulnerability_report(
                org_id=org_id,
                severity_filter=severity,
                time_range="7d",
                include_remediation=True,
                group_by="application"
            )
            print(f"✅ {severity} severity report: {len(result['report'])} groups")
        except Exception as e:
            print(f"❌ Failed to generate {severity} report: {e}")
    
    print("\n" + "="*50 + "\n")
    
    # Test 6: Demonstrate API endpoint usage
    print("6. API Endpoint Information:")
    print("   Endpoint: GET /api/v1/reports/org/{orgId}/findings")
    print("   Purpose: Retrieve organization-wide vulnerability findings")
    print("   Features:")
    print("     - Comprehensive filtering by severity, time, application")
    print("     - Pagination support for large datasets")
    print("     - Detailed remediation information")
    print("     - Real-time vulnerability data")
    
    print("\n=== Vulnerability Reporting Testing Complete ===") 